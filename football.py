import csv

# open Players.csv file with csv.DictReader and read its content into a list of dictionary, players_data
players_data = []
with open('Players.csv', 'r') as f:
    rows = csv.DictReader(f)
    for r in rows:
        players_data.append(r)

# open Teams.csv file with csv.DictReader and read its content into a list of dictionary, teams_data
teams_data = []
with open('Teams.csv', 'r') as f:
    rows = csv.DictReader(f)
    for r in rows:
        teams_data.append(r)


def average_shots(players_data):
    Defenders_shots_list=[]
    Midfielders_shots_list=[]
    Forwards_shots_list=[]
    Goalkeepers_shots_list=[]
    for r in players_data:
        if r["position"] == "defender":
            Defenders_shots_list.append(int(r["shots"]))
        elif r["position"] == "midfielder":
            Midfielders_shots_list.append(int(r["shots"]))
        elif r["position"] == "forward":
            Forwards_shots_list.append(int(r["shots"]))
        elif r["position"] == "goalkeeper":
            Goalkeepers_shots_list.append(int(r["shots"]))
    Avg_shots_Def = sum(Defenders_shots_list)/len(Defenders_shots_list)
    Avg_shots_Mid = sum(Midfielders_shots_list)/len(Midfielders_shots_list)
    Avg_shots_Fw = sum(Forwards_shots_list)/len(Forwards_shots_list)
    Avg_shots_Gk = sum(Goalkeepers_shots_list)/len(Goalkeepers_shots_list)
    return Avg_shots_Def,Avg_shots_Mid,Avg_shots_Fw,Avg_shots_Gk
    """Returns a tuple with four elements; the first, second, third, and
    fourth elements show the average number of shots made by defenders,
    midfielders, forwards, and goalkeepers, respectively

    Notes: the test results below are printed out with two decimal places to
    get around floating-point errors.

    >>> averages = average_shots(players_data)
    >>> type(averages)
    <class 'tuple'>
    >>> [f'{a:.2f}' for a in averages]
    ['1.16', '2.39', '4.23', '0.03'] 
    """

def max_GF_GA_ratio(teams_data):
    Goal_ratio_list = []
    for i in teams_data:
        Goal_ratio_list.append(int(i["goalsFor"])/int(i["goalsAgainst"]))
    Max = max(Goal_ratio_list)
    Index = Goal_ratio_list.index(Max)
    Team_name_list = []
    for j in teams_data:
        Team_name_list.append(j["team"])
    return Team_name_list[Index]
    """Returns the string name of a team with highest ratio of goalsFor to
    goalsAgainst

    >>> max_GF_GA_ratio(teams_data)
    'Portugal'
    """

def whose_player_list(players_data, teams_data):
    Team_list_1st = []
    for a in teams_data:
        Team_list_1st.append(a["team"])
    Team_list = []
    for i in teams_data:
        if int(i["ranking"])<=10:
            Team_list.append((i["team"]))
    Player_list = []
    for j in players_data:
        if ((j["team"]) in Team_list) and ((int(j["minutes"]))<250) and ((int(j["passes"]))>150):
            Player_list.append(j)
    Team_list_final = []
    for k in Player_list:
        Team_list_final.append(k["team"])
    Team_ranking = []
    for l in teams_data:
        Team_ranking.append(l["ranking"])
    Index = []
    for o in Team_list_final:
        Index.append(Team_list_1st.index(o))
    Team_ranking_final = []
    for p in Index:
        Team_ranking_final.append(Team_ranking[p])
    Player_list_final = []
    for m in range(0,len(Player_list)):
        Tuple = (Player_list[m]["surname"],Player_list[m]["team"],Team_list_final[m],Player_list[m]["minutes"],Player_list[m]["passes"])
        Player_list_final.append(Tuple)
    return Player_list_final
    """Returns a list of tuples; each tuple has information about a player who
    is on a team ranked in the top 10, plays less than 250 minutes and makes
    more than 150 passes; the format for each tuple is (player's surname, team
    played for, team ranking, minutes played, number of passes)

    >>> whose_player_list(players_data, teams_data)
    [('Veron', 'Argentina', 7, 185, 235), ('Montolivo', 'Italy', 5, 236, 163)]
    """
    # Reminder: Convert minutes and passes to integers before comparing to values

def team_list_shots_per_minute(players_data, teams_data):
    Team_list = []
    for a in teams_data:
        Team_list.append(a["team"])
    Team_list.sort()
    Info_list = []
    for b in range(0,len(Team_list)):
        Sum_shots = 0
        Sum_minute = 0
        for c in players_data:
            if c["team"] in Team_list[b]:
                Sum_shots += int(c["shots"])
                Sum_minute += int(c["minutes"])
            else:
                pass
        Info_list.append(Sum_shots/Sum_minute)
    List_of_tuple = []
    for d in range(0,len(Team_list)):
        Tuple = (Team_list[d],Info_list[d])
        List_of_tuple.append(Tuple)
    return List_of_tuple
    """Returns a list of tuples; each tuple has information about a team and
    its shots per minute value generated by its players

    Notes: the test results below are printed out with five decimal places to
    get around floating-point errors.

    >>> list_of_tuples = team_list_shots_per_minute(players_data, teams_data)
    >>> list_of_tuples.sort()
    >>> for team,shots in list_of_tuples:
    ...     print(f'{team} {shots:.5f}')
    ... 
    Algeria 0.01050
    Argentina 0.01394
    Australia 0.01010
    Brazil 0.01440
    Cameroon 0.01178
    Chile 0.01152
    Denmark 0.01077
    England 0.01237
    France 0.00998
    Germany 0.01121
    Ghana 0.01337
    Greece 0.01077
    Honduras 0.00438
    Italy 0.01212
    Ivory Coast 0.01313
    Japan 0.00886
    Mexico 0.01086
    Netherlands 0.01128
    New Zealand 0.00505
    Nigeria 0.00996
    North Korea 0.01077
    Paraguay 0.00928
    Portugal 0.01263
    Serbia 0.01286
    Slovakia 0.00884
    Slovenia 0.00572
    South Africa 0.01184
    South Korea 0.01111
    Spain 0.01380
    Switzerland 0.00721
    USA 0.01282
    Uruguay 0.01118
    """

if __name__ == "__main__":
    import doctest
    doctest.testmod()
